##Nginx+lua技术分享
1,Nginx
1,nginx采用多进程/单线程、非阻塞、异步IO的工作模型，Linux上基于epoll 事件处理模块，多路复用机制(multiplex)。好处：没有线程上下文切换消耗，内存占用极少
 
2，nginx配置文件是一门微型语言，变量必须以$开头，变量插值(variable interpolotion)
 
推荐：agentzh's Nginx Tutorials 
http://openresty.org/download/agentzh-nginx-tutorials-zhcn.pdf 
2,Lua
	Lua is a powerful, fast, lightweight, embeddable scripting language.
	Lua(5.3.0/5.1.4)是一门小巧的脚本语言，主要用途是嵌入到其他应用程序中，提供简单灵活的配置和扩展功能，不适合作为开发独立应用程序使用。
1，	c/c++系统的无缝融合，实现扩展功能，常作为游戏脚本使用
2，	精简高效，lua解释器不到300k
2.1 Lua和LuaJit
	LuaJIt为lua提供特定平台的即时编译功能，使得其性能更加提升，实际项目中推荐使用LuaJIt，http://luajit.org/ 	Mike Pall
	 

LuaJIt2.0.x与Lua5.1兼容，极个别使用不兼容，一般开发不会使用到。
 
http://luajit.org/extensions.html 实现了更加方便易用的扩展，Bit FFI JIT

2.2 Lua语法特色
1，	单行注释 - -  多行注释 - - [[ 	- - ]] 单行字符串’’  “”，多行字符串[[ ]] 
2，	幽灵nil，未定义的变量是nil，回收变量，将其赋值成nil
在lua中只有false和nil为假，其他均为真(0，””)
在print输出时报异常，使用totring(nil)
其他模块中的空值，ngx.null,cjson.null 
六种数据类型：Nil Boolean Number String Function Userdata和Thread
3，	一种强大的数据结构table，仅此一种数据结构
可以多层嵌套，包含不同的数据类型，
 
{x=10, y=45; "one", "two", "three"}
p.pop_blacklist={"202.106.180","219.142.100","219.234.82","220.181.124"}
不论以何种方式创建table，都可以动态向表中添加、删除任何类型的域
4，	默认变量是global全局的，需要使用local关键字
5，	遍历下标从1开始
6，	提前返回，return之后必须是end，很多提前返回的时候只能写 do return end
7，	访问table、userdate的域使用 . ，字符串连接使用 .. ，方法调用使用 : 
8，	没有continue关键字，需要的时候只能写 if else 
9，	协程 非抢占式多线程，通过协作完成，任何时刻只有一个协程程序在运行，resume-yield互相交换数据，挂起、运行、停止三种状态，返回thread类型对象
resume返回true和 yield的参数
yield返回由对应的resume传递的参数
 

 

运行结果：
1,  true    6   0
internal    10
2,  true

co-body	1	10
foo	2
main	true	4
co-body	r
main	true	11	-9
co-body	x	y
main	true	10	end
main	false	cannot resume dead coroutine

 

Lua的标准库：
   
标准库全部由C语言实现
采访Lua作者的一篇文章：
http://blog.codingnow.com/2010/06/masterminds_of_programming_7_lua.html 
3,Nginx+lua
http://openresty.org/ 
OpenResty (aka. ngx_openresty) is a full-fledged web application server by bundling the standard Nginx core, lots of 3rd-party Nginx modules, as well as most of their external dependencies.

1,OpenResty是nginx的Bundle，使用nginx官方内核，不是nginx的Fork(Tengine)

2,集成ngx_lua模块实现非阻塞、高并发业务处理。使用nginx的epoll事件模型实现http处理的非阻塞，还实现与后端上游的Mysql、PostgreSQL、Memcached、Redis通信

3.1,Nginx+lua配置：
 
 
末尾的 ;; 代表系统默认路径
 
cpath默认路径 /usr/local/lib/lua/5.1

设置location访问的URI：

 

 

 
 
由Lua粘合的Nginx生态环境，agentZh
http://blog.zoomquiet.org/pyblosxom/oss/openresty-intro-2012-03-06-01-13.html 
3.2,Lua代码
 
 
丰富的Nginx buildin变量方法：
ngx.var.cookie_xx 	ngx.var.arg_xx	
ngx.say()  ngx.redirect()  ngx.log()  ngx.print()
ngx.req.read_body()
ngx.req.get_body_data()
 
http://wiki.nginx.org/HttpLuaModule 
4,Loveshell/WAF
4.1 WAF安装部署
https://github.com/loveshell/ngx_lua_waf 
ngx_lua_waf是一个基于lua-nginx-module(openresty)的web应用防火墙
测试机器：wan.sogou.com 10.12.4.161

1，	yum install nginx-sogou-lua-extra.newpassport.x86_64
2，	nginx.conf配置
 
3，	修改nginx中user 为root root 让nginx process 用户有权限写log路径日志
 

效果：
 

4.2 实际部署
	 

1，	M2 nginx安装 nginx passport lua模块，部署waf，其他Lua模块，可以获取用户登录态
 
2，	在主站、大厅resin服务器上安装nginx lua，高并发接口使用lua脚本处理
